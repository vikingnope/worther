name: 'Load Bot Patterns'
description: 'Loads and provides bot detection patterns from centralized configuration'

outputs:
  bot-patterns-script:
    description: 'JavaScript code that loads bot detection functions from saved config'
    value: ${{ steps.load-patterns.outputs.bot-patterns-script }}

runs:
  using: 'composite'
  steps:
    - name: Load bot patterns from configuration
      id: load-patterns
      shell: bash
      run: |
        # Read the bot patterns configuration file
        BOT_CONFIG_FILE="${GITHUB_WORKSPACE}/.github/bot-patterns.json"

        if [[ ! -f "$BOT_CONFIG_FILE" ]]; then
          echo "::error::Bot patterns configuration file not found: $BOT_CONFIG_FILE"
          exit 1
        fi

        # Copy config to a standard location for easy access
        mkdir -p /tmp/bot-patterns
        cp "$BOT_CONFIG_FILE" /tmp/bot-patterns/config.json

        # Generate lightweight loader script with pattern validation
        cat << 'EOF' > /tmp/bot-patterns-loader.js
        const fs = require('fs');
        const config = JSON.parse(fs.readFileSync('/tmp/bot-patterns/config.json', 'utf8'));

        function validatePattern(patternObj, type) {
          if (!patternObj.pattern || typeof patternObj.pattern !== 'string') return null;
          if (patternObj.pattern.length > 200) { console.warn(`${type} pattern too long, skipping`); return null; }
          try { return new RegExp(patternObj.pattern, patternObj.flags || ''); } 
          catch (e) { console.warn(`Invalid ${type} pattern: ${patternObj.pattern}, skipping`); return null; }
        }

        const excludedBotPatterns = (config.excludedBotPatterns || []).map(p => validatePattern(p, 'excluded')).filter(Boolean);
        const botPatterns = (config.botPatterns || []).map(p => validatePattern(p, 'bot')).filter(Boolean);
        const allBotPatterns = [...excludedBotPatterns, ...botPatterns];
        function isBot(username) { return allBotPatterns.some(pattern => pattern.test(username)); }
        function isExcludedBot(username) { return excludedBotPatterns.some(pattern => pattern.test(username)); }
        function isDependabot(username) { return /^dependabot(\[bot\])?$/i.test(username); }
        if (typeof module !== 'undefined' && module.exports) { module.exports = { excludedBotPatterns, allBotPatterns, isBot, isExcludedBot, isDependabot }; }
        EOF

        # Set the compact loader script as output
        BOT_PATTERNS_SCRIPT=$(cat /tmp/bot-patterns-loader.js)

        {
          echo "bot-patterns-script<<BOT_PATTERNS_EOF"
          echo "$BOT_PATTERNS_SCRIPT"
          echo "BOT_PATTERNS_EOF"
        } >> $GITHUB_OUTPUT

        echo "âœ… Bot patterns loaded successfully from configuration"
