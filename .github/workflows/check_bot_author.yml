name: Check PR Author Bot Status

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
        description: 'The pull request number to check'
      event_type:
        required: true
        type: string
        description: 'The event type (pull_request or issue_comment)'
    outputs:
      is_bot:
        description: 'Whether the PR author is a bot'
        value: ${{ jobs.check-bot-author.outputs.is_bot }}
      is_dependabot:
        description: 'Whether the PR author is specifically Dependabot'
        value: ${{ jobs.check-bot-author.outputs.is_dependabot }}
      is_excluded_bot:
        description: 'Whether the PR author is an excluded bot (should skip all checks)'
        value: ${{ jobs.check-bot-author.outputs.is_excluded_bot }}

jobs:
  check-bot-author:
    name: 🔍 Check PR Author
    runs-on: ubuntu-latest
    outputs:
      is_bot: ${{ steps.check-bot.outputs.is_bot }}
      is_dependabot: ${{ steps.check-bot.outputs.is_dependabot }}
      is_excluded_bot: ${{ steps.check-bot.outputs.is_excluded_bot }}
    steps:
      - name: Check if PR author is a bot
        id: check-bot
        uses: actions/github-script@v7.0.1
        with:
          script: |
            let prAuthor;
            let prNumber;

            // Handle different event types
            if (context.payload.pull_request) {
              // For direct PR events
              prAuthor = context.payload.pull_request.user.login;
              prNumber = context.payload.pull_request.number;
              console.log(`Direct PR event: PR #${prNumber} by ${prAuthor}`);
            } else {
              // For comment-triggered events, fetch PR details using the provided number
              const inputPR = '${{ inputs.pr_number }}';
              if (!inputPR || isNaN(Number(inputPR))) {
                core.setFailed('Invalid or missing PR number input');
                return;
              }
              prNumber = Number(inputPR);
              console.log(`Comment-triggered event: Fetching PR #${prNumber} details`);
              
              try {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                prAuthor = pr.user.login;
                console.log(`Fetched PR author: ${prAuthor}`);
              } catch (error) {
                console.error(`Error fetching PR details: ${error.message}`);
                core.setFailed(`Failed to fetch PR details: ${error.message}`);
                return;
              }
            }

            // Define excluded bot patterns (bots that should cause workflow to skip entirely)
            const excludedBotPatterns = [
              /^coderabbit(ai)?(-[a-z0-9]+)?$/i,     // CodeRabbit variants
              /^vercel(\[bot\])?$/i,                 // Vercel bot
            ];

            // Define all bot patterns (including excluded ones)
            const botPatterns = [
              ...excludedBotPatterns,                // Excluded bots
              /^dependabot(\[bot\])?$/i,             // Dependabot (dependabot, dependabot[bot])
              /^github-actions(\[bot\])?$/i,         // GitHub Actions bot
              /^renovate(\[bot\])?$/i,               // Renovate bot
              /^greenkeeper(\[bot\])?$/i,            // Greenkeeper bot
              /^snyk-bot$/i,                         // Snyk security bot
              /\[bot\]$/i,                           // Generic [bot] suffix pattern
              /-bot$/i,                              // Generic -bot suffix pattern
            ];

            // Check if the author matches any bot pattern
            const isBot = botPatterns.some(pattern => pattern.test(prAuthor));

            // Check if the author is an excluded bot
            const isExcludedBot = excludedBotPatterns.some(pattern => pattern.test(prAuthor));

            // Check specifically for Dependabot
            const isDependabot = /^dependabot(\[bot\])?$/i.test(prAuthor);

            // Set outputs
            core.setOutput('is_bot', isBot.toString());
            core.setOutput('is_dependabot', isDependabot.toString());
            core.setOutput('is_excluded_bot', isExcludedBot.toString());

            console.log(`PR #${prNumber} Author: ${prAuthor}`);
            console.log(`Is Bot: ${isBot}`);
            console.log(`Is Dependabot: ${isDependabot}`);
            console.log(`Is Excluded Bot: ${isExcludedBot}`);

            // If this is an excluded bot, create a comment and exit gracefully
            if (isExcludedBot) {
              console.log(`Detected excluded bot: ${prAuthor}. Workflow will be skipped.`);
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `🤖 **Automated Bot Detected**: This PR is from \`${prAuthor}\`, which is an excluded bot. PR checks have been automatically skipped to avoid unnecessary workflow runs.`
                });
                console.log('Added comment about excluded bot detection');
              } catch (error) {
                console.log(`Could not add comment (this is normal): ${error.message}`);
              }
            }
